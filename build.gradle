buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("de.dfki.mary:marytts-builder:5.2") {
            exclude group: '*', module: 'groovy-all'
            exclude group: '*', module: 'mwdumper'
            exclude group: '*', module: 'sgt'
        }
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-legacy'
    id 'de.dfki.mary.voicebuilding-festvox'
}

group 'de.dfki.mary'
version '5.3-SNAPSHOT'

marytts.voice {
    name = 'cmu-awb-time'
    language = 'en'
    region = 'US'
    gender = 'male'
    type = 'unit selection'
    description = 'A male Scottish English limited-domain unit selection voice, built from recordings provided by Carnegie Mellon University'
    samplingRate = 16000
}

repositories {
    ivy {
        url 'https://dl.bintray.com/marytts/marytts'
        layout 'pattern', {
            artifact '[organisation]/[module]/[artifact].[ext]'
        }
    }
    ivy {
        url 'http://festvox.org/examples'
        layout 'pattern', {
            artifact '[module]_[classifier]/packed/[artifact].[ext]'
        }
    }
}

dependencies {
    data group: 'org.festvox', name: 'cmu_time_awb', classifier: 'ldom', ext: 'tar.bz2'
}

text {
    srcFile = file("$sourceSets.data.output.resourcesDir/time.data")
}

basenames {
    textDir = text.destDir
    labDir = lab.destDir
}

generateAllophones {
    srcDir = text.destDir
}

generateVoiceConfig {
    afterEvaluate {
        config.get() << [
                exampleTextFile: "jar:/marytts/voice/$marytts.voice.nameCamelCase/exampleText.txt",
        ]
    }
}

task makeBasenameDatagrams(type: MakeBasenameDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    pmDir = pitchmarkConverter.destDir
    destDir = layout.buildDirectory.dir('basenameDatagrams')
}

task basenameTimelineMaker(type: BasenameTimelineMaker) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    srcDir = makeBasenameDatagrams.destDir
    destFile = layout.buildDirectory.file('timeline_basenames.mry')
}

task testBasenameTimelineMaker {
    dependsOn basenameTimelineMaker, legacyBasenameTimelineMaker
    doLast {
        def actual = basenameTimelineMaker.destFile.get().asFile.bytes
        def expected = legacyBasenameTimelineMaker.destFile.get().asFile.bytes
        assert actual == expected
    }
}

import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import marytts.tools.voiceimport.TimelineWriter
import marytts.util.data.Datagram

import javax.inject.Inject

class MakeBasenameDatagrams extends DefaultTask {

    final WorkerExecutor workerExecutor

    @Input
    Property<Integer> sampleRate = project.objects.property(Integer)

    @InputFile
    final RegularFileProperty basenamesFile = newInputFile()

    @InputDirectory
    final DirectoryProperty pmDir = newInputDirectory()

    @OutputDirectory
    final DirectoryProperty destDir = newOutputDirectory()

    @Inject
    MakeBasenameDatagrams(WorkerExecutor workerExecutor) {
        this.workerExecutor = workerExecutor
    }

    @TaskAction
    void make() {
        basenamesFile.get().asFile.eachLine('UTF-8') { basename ->
            def srcFile = pmDir.file("${basename}.pm").get().asFile
            def destFile = destDir.file("${basename}.json").get().asFile
            workerExecutor.submit(BasenameDatagramMaker.class) { config ->
                config.params srcFile, destFile, sampleRate.get()
            }
        }
    }
}

class BasenameDatagramMaker implements Runnable {

    File srcFile

    File destFile

    int sampleRate

    @Inject
    BasenameDatagramMaker(File srcFile, File destFile, int sampleRate) {
        this.srcFile = srcFile
        this.destFile = destFile
        this.sampleRate = sampleRate
    }

    @Override
    void run() {
        def lastTime = srcFile.readLines().last().split().first() as float
        def duration = (lastTime * sampleRate) as long
        def basename = srcFile.name - '.pm'
        def json = new JsonBuilder([
                [
                        duration: duration,
                        data    : basename.bytes.encodeBase64().toString()
                ]
        ])
        destFile.text = json
    }
}

class BasenameTimelineMaker extends DefaultTask {

    @Input
    Property<Integer> sampleRate = project.objects.property(Integer)

    @InputFile
    final RegularFileProperty basenamesFile = newInputFile()

    @InputDirectory
    final DirectoryProperty srcDir = newInputDirectory()

    @OutputFile
    final RegularFileProperty destFile = newOutputFile()

    @TaskAction
    void make() {
        def timeline = new TimelineWriter(destFile.get().asFile.path, '\n', sampleRate.get(), 2.0);
        basenamesFile.get().asFile.eachLine('UTF-8') { basename ->
            def datagramFile = srcDir.file("${basename}.json").get().asFile
            def json = new JsonSlurper().parse(datagramFile)
            json.each { jsonDatagram ->
                def datagram = new Datagram(jsonDatagram.duration, jsonDatagram.data.decodeBase64())
                timeline.feed(datagram, sampleRate.get())
            }
        }
        timeline.close()
    }
}
