plugins {
    id 'de.dfki.mary.voicebuilding-legacy'
    id 'de.dfki.mary.voicebuilding-festvox'
}

group 'de.dfki.mary'
version '5.3-SNAPSHOT'

marytts.voice {
    name = 'cmu-awb-time'
    language = 'en'
    region = 'US'
    gender = 'male'
    type = 'unit selection'
    description = 'A male Scottish English limited-domain unit selection voice, built from recordings provided by Carnegie Mellon University'
    samplingRate = 16000
}

repositories {
    ivy {
        url 'https://dl.bintray.com/marytts/marytts'
        layout 'pattern', {
            artifact '[organisation]/[module]/[artifact].[ext]'
        }
    }
    ivy {
        url 'http://festvox.org/examples'
        layout 'pattern', {
            artifact '[module]_[classifier]/packed/[artifact].[ext]'
        }
    }
}

dependencies {
    data group: 'org.festvox', name: 'cmu_time_awb', classifier: 'ldom', ext: 'tar.bz2'
}

text {
    srcFile = file("$sourceSets.data.output.resourcesDir/time.data")
}

basenames {
    textDir = text.destDir
    labDir = lab.destDir
}

generateAllophones {
    srcDir = text.destDir
}

generateVoiceConfig {
    afterEvaluate {
        config.get() << [
                exampleTextFile: "jar:/marytts/voice/$marytts.voice.nameCamelCase/exampleText.txt",
        ]
    }
}

task makeBasenameDatagrams(type: MakeBasenameDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    pmDir = pitchmarkConverter.destDir
    destDir = layout.buildDirectory.dir('basenameDatagrams')
}

task basenameTimelineMaker(type: TimelineMaker) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    idxIntervalInSeconds = 2.0
    srcDir = makeBasenameDatagrams.destDir
    destFile = layout.buildDirectory.file('timeline_basenames.mry')
}

task testBasenameTimelineMaker {
    dependsOn basenameTimelineMaker, legacyBasenameTimelineMaker
    doLast {
        def actual = basenameTimelineMaker.destFile.get().asFile.bytes
        def expected = legacyBasenameTimelineMaker.destFile.get().asFile.bytes
        assert actual == expected
    }
}

task makeWaveDatagrams(type: MakeWaveDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    wavDir = wav.destDir
    pmDir = pitchmarkConverter.destDir
    destDir = layout.buildDirectory.dir('waveDatagrams')
}

task waveTimelineMaker(type: TimelineMaker) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    idxIntervalInSeconds = 0.1
    srcDir = makeWaveDatagrams.destDir
    destFile = layout.buildDirectory.file('timeline_waveforms.mry')
}

task testWaveTimelineMaker {
    dependsOn waveTimelineMaker, legacyWaveTimelineMaker
    doLast {
        def actual = waveTimelineMaker.destFile.get().asFile.bytes
        def expected = legacyWaveTimelineMaker.destFile.get().asFile.bytes
        assert actual == expected
    }
}

task makeMcepDatagrams(type: MakeMcepDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    mcepDir = mcepExtractor.destDir
    destDir = layout.buildDirectory.dir('mcepDatagrams')
}

task generateMcepTimelineHeader(type: GenerateMcepTimelineHeader) {
    srcDir = mcepExtractor.destDir
    destFile = layout.buildDirectory.file('timeline_mcep.properties')
}

task mcepTimelineMaker(type: McepTimelineMaker) {
    basenamesFile = basenames.destFile
    headerFile = generateMcepTimelineHeader.destFile
    sampleRate = marytts.voice.samplingRate
    idxIntervalInSeconds = 0.1
    srcDir = makeMcepDatagrams.destDir
    destFile = layout.buildDirectory.file('timeline_mcep.mry')
}

task testMcepTimelineMaker {
    dependsOn mcepTimelineMaker, legacyMCepTimelineMaker
    doLast {
        def actual = mcepTimelineMaker.destFile.get().asFile.bytes
        def expected = legacyMCepTimelineMaker.destFile.get().asFile.bytes
        assert actual == expected
    }
}
