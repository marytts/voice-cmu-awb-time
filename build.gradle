plugins {
    id 'de.dfki.mary.voicebuilding-legacy'
    id 'de.dfki.mary.voicebuilding-festvox'
}

group 'de.dfki.mary'
version '5.3-SNAPSHOT'

ext {
    incubatingBuildDir = layout.buildDirectory.dir('mary_new')
}

marytts.voice {
    name = 'cmu-awb-time'
    language = 'en'
    region = 'US'
    gender = 'male'
    type = 'unit selection'
    description = 'A male Scottish English limited-domain unit selection voice, built from recordings provided by Carnegie Mellon University'
    samplingRate = 16000
}

repositories {
    ivy {
        url 'https://dl.bintray.com/marytts/marytts'
        layout 'pattern', {
            artifact '[organisation]/[module]/[artifact].[ext]'
        }
    }
    ivy {
        url 'http://festvox.org/examples'
        layout 'pattern', {
            artifact '[module]_[classifier]/packed/[artifact].[ext]'
        }
    }
}

dependencies {
    data group: 'org.festvox', name: 'cmu_time_awb', classifier: 'ldom', ext: 'tar.bz2'
}

text {
    srcFile = file("$sourceSets.data.output.resourcesDir/time.data")
}

basenames {
    textDir = text.destDir
    labDir = lab.destDir
}

generateAllophones {
    srcDir = text.destDir
}

generateVoiceConfig {
    afterEvaluate {
        config.get() << [
                exampleTextFile: "jar:/marytts/voice/$marytts.voice.nameCamelCase/exampleText.txt",
        ]
    }
}

task makeBasenameDatagrams(type: MakeBasenameDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    pmDir = pitchmarkConverter.destDir
    destDir = layout.buildDirectory.dir('basenameDatagrams')
}

task basenameTimelineMaker(type: TimelineMaker) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    idxIntervalInSeconds = 2.0
    srcDir = makeBasenameDatagrams.destDir
    destFile = incubatingBuildDir.get().file('timeline_basenames.mry')
}

task testBasenameTimelineMaker {
    dependsOn basenameTimelineMaker, legacyBasenameTimelineMaker
    doLast {
        def actual = basenameTimelineMaker.destFile.get().asFile.bytes
        def expected = legacyBasenameTimelineMaker.destFile.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task makeWaveDatagrams(type: MakeWaveDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    wavDir = wav.destDir
    pmDir = pitchmarkConverter.destDir
    destDir = layout.buildDirectory.dir('waveDatagrams')
}

task waveTimelineMaker(type: TimelineMaker) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    idxIntervalInSeconds = 0.1
    srcDir = makeWaveDatagrams.destDir
    destFile = incubatingBuildDir.get().file('timeline_waveforms.mry')
}

task testWaveTimelineMaker {
    dependsOn waveTimelineMaker, legacyWaveTimelineMaker
    doLast {
        def actual = waveTimelineMaker.destFile.get().asFile.bytes
        def expected = legacyWaveTimelineMaker.destFile.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task makeMcepDatagrams(type: MakeMcepDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    mcepDir = mcepExtractor.destDir
    destDir = layout.buildDirectory.dir('mcepDatagrams')
}

task generateMcepTimelineHeader(type: GenerateMcepTimelineHeader) {
    srcDir = mcepExtractor.destDir
    destFile = incubatingBuildDir.get().file('timeline_mcep.properties')
}

task mcepTimelineMaker(type: McepTimelineMaker) {
    basenamesFile = basenames.destFile
    headerFile = generateMcepTimelineHeader.destFile
    sampleRate = marytts.voice.samplingRate
    idxIntervalInSeconds = 0.1
    srcDir = makeMcepDatagrams.destDir
    destFile = incubatingBuildDir.get().file('timeline_mcep.mry')
}

task phoneUnitFileMaker(type: PhoneUnitFileMaker) {
    basenamesFile = basenames.destFile
    srcDir = legacyPhoneLabelFeatureAligner.destDir
    srcExt = 'lab'
    pmDir = pitchmarkConverter.destDir
    sampleRate = marytts.voice.samplingRate
    destFile = incubatingBuildDir.get().file('phoneUnits.mry')
}

task testPhoneUnitFileMaker {
    dependsOn phoneUnitFileMaker, legacyPhoneUnitfileWriter
    doLast {
        def actual = phoneUnitFileMaker.destFile.get().asFile.bytes
        def expected = legacyPhoneUnitfileWriter.destFile.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task halfPhoneUnitFileMaker(type: PhoneUnitFileMaker) {
    basenamesFile = basenames.destFile
    srcDir = legacyHalfPhoneLabelFeatureAligner.destDir
    srcExt = 'hplab'
    pmDir = pitchmarkConverter.destDir
    sampleRate = marytts.voice.samplingRate
    destFile = incubatingBuildDir.get().file('halfphoneUnits.mry')
}

task testHalfPhoneUnitFileMaker {
    dependsOn halfPhoneUnitFileMaker, legacyHalfPhoneUnitfileWriter
    doLast {
        def actual = halfPhoneUnitFileMaker.destFile.get().asFile.bytes
        def expected = legacyHalfPhoneUnitfileWriter.destFile.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task generatePhoneFeatureDefinitionFile(type: GeneratePhoneFeatureDefinitionFile) {
    srcDir = phoneUnitFeatureComputer.destDir
    srcExt = phoneUnitFeatureComputer.outputExt
    destFile = incubatingBuildDir.get().file('phoneUnitFeatureDefinition.txt')
}

task testGeneratePhoneFeatureDefinitionFile {
    dependsOn generatePhoneFeatureDefinitionFile, legacyPhoneFeatureFileWriter
    doLast {
        def actual = generatePhoneFeatureDefinitionFile.destFile.get().asFile.readLines()
        def expected = legacyPhoneFeatureFileWriter.destFile2.get().asFile.readLines()
        assert actual == expected
    }
    test.dependsOn it
}

task generateHalfPhoneFeatureDefinitionFile(type: GeneratePhoneFeatureDefinitionFile) {
    srcDir = halfPhoneUnitFeatureComputer.destDir
    srcExt = halfPhoneUnitFeatureComputer.outputExt
    destFile = incubatingBuildDir.get().file('halfphoneUnitFeatureDefinition.txt')
}

task testGenerateHalfPhoneFeatureDefinitionFile {
    dependsOn generateHalfPhoneFeatureDefinitionFile, legacyHalfPhoneFeatureFileWriter
    doLast {
        def actual = generateHalfPhoneFeatureDefinitionFile.destFile.get().asFile.readLines()
        def expected = legacyHalfPhoneFeatureFileWriter.destFile2.get().asFile.readLines()
        assert actual == expected
    }
    test.dependsOn it
}

task phoneFeatureFileMaker(type: PhoneFeatureFileMaker) {
    basenamesFile = basenames.destFile
    srcDir = phoneUnitFeatureComputer.destDir
    srcExt = phoneUnitFeatureComputer.outputExt
    unitFile = phoneUnitFileMaker.destFile
    featureDefinitionFile = generatePhoneFeatureDefinitionFile.destFile
    destFile = incubatingBuildDir.get().file('phoneFeatures.mry')
}

task testPhoneFeatureFileMaker {
    dependsOn phoneFeatureFileMaker, legacyPhoneFeatureFileWriter
    doLast {
        def actual = phoneFeatureFileMaker.destFile.get().asFile.bytes
        def expected = legacyPhoneFeatureFileWriter.destFile.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task halfPhoneFeatureFileMaker(type: PhoneFeatureFileMaker) {
    basenamesFile = basenames.destFile
    srcDir = halfPhoneUnitFeatureComputer.destDir
    srcExt = halfPhoneUnitFeatureComputer.outputExt
    unitFile = halfPhoneUnitFileMaker.destFile
    featureDefinitionFile = generateHalfPhoneFeatureDefinitionFile.destFile
    destFile = incubatingBuildDir.get().file('halfphoneFeatures.mry')
}

task testHalfPhoneFeatureFileMaker {
    dependsOn halfPhoneFeatureFileMaker, legacyHalfPhoneFeatureFileWriter
    doLast {
        def actual = halfPhoneFeatureFileMaker.destFile.get().asFile.bytes
        def expected = legacyHalfPhoneFeatureFileWriter.destFile.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task f0ContourFeatureFileMaker(type: F0ContourFeatureFileMaker) {
    featureFile = halfPhoneFeatureFileMaker.destFile
    timelineFile = waveTimelineMaker.destFile
    unitFile = halfPhoneUnitFileMaker.destFile
    gender = marytts.voice.gender
    destFile = incubatingBuildDir.get().file('syllableF0Polynomials.mry')
}

task testF0ContourFeatureFileMaker {
    dependsOn f0ContourFeatureFileMaker, legacyF0PolynomialFeatureFileWriter
    doLast {
        def actual = f0ContourFeatureFileMaker.destFile.get().asFile.bytes
        def expected = legacyF0PolynomialFeatureFileWriter.destFile.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task generateAcousticFeatureDefinitionFile(type: GenerateAcousticFeatureDefinitionFile) {
    srcFile = halfPhoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('halfphoneUnitFeatureDefinition_ac.txt')
}

task testGenerateAcousticFeatureDefinitionFile {
    dependsOn generateAcousticFeatureDefinitionFile, legacyAcousticFeatureFileWriter
    doLast {
        def actual = generateAcousticFeatureDefinitionFile.destFile.get().asFile.readLines()
        def expected = legacyAcousticFeatureFileWriter.destFile2.get().asFile.readLines()
        assert actual == expected
    }
    test.dependsOn it
}

task acousticFeatureFileMaker(type: AcousticFeatureFileMaker) {
    featureDefinitionFile = generateAcousticFeatureDefinitionFile.destFile
    unitFile = halfPhoneUnitFileMaker.destFile
    contourFile = f0ContourFeatureFileMaker.destFile
    featureFile = halfPhoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('halfphoneFeatures_ac.mry')
}

task generateJoinCostWeights(type: GenerateJoinCostWeights) {
    destFile = incubatingBuildDir.get().file('joinCostWeights.txt')
}

task joinCostFileMaker(type: JoinCostFileMaker) {
    weightsFile = generateJoinCostWeights.destFile
    mcepFile = mcepTimelineMaker.destFile
    unitFile = halfPhoneUnitFileMaker.destFile
    featureFile = acousticFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('joinCostFeatures.mry')
}

task generateDurationFeatureDescription(type: GenerateProsodyFeatureDescription) {
    srcFile = phoneFeatureFileMaker.destFile
    targetFeatures = ['segment_duration']
    destFile = layout.buildDirectory.dir('prosody').get().file('dur.desc')
}

task testGenerateDurationFeatureDescription {
    dependsOn generateDurationFeatureDescription, legacyDurationCARTTrainer
    doLast {
        def actual = generateDurationFeatureDescription.destFile.get().asFile.readLines()
        def expected = file("$buildDir/temp/dur.desc").readLines()
        assert actual == expected
    }
    test.dependsOn it
}

task generateF0FeatureDescription(type: GenerateProsodyFeatureDescription) {
    srcFile = phoneFeatureFileMaker.destFile
    targetFeatures = ['leftF0', 'midF0', 'rightF0']
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.desc')
}

task extractDurationFeatures(type: ExtractDurationFeatures) {
    unitFile = phoneUnitFileMaker.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = layout.buildDirectory.dir('prosody').get().file('dur.feats')
}

task testExtractDurationFeatures {
    dependsOn extractDurationFeatures, legacyDurationCARTTrainer
    doLast {
        def actual = extractDurationFeatures.destFile.get().asFile.readLines()
        def expected = file("$buildDir/temp/dur.feats").readLines()
        assert actual == expected
    }
    test.dependsOn it
}

task extractF0Features(type: ExtractF0Features) {
    unitFile = phoneUnitFileMaker.destFile
    featureFile = phoneFeatureFileMaker.destFile
    timelineFile = waveTimelineMaker.destFile
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.feats')
}

task trainDurationCart(type: TrainProsodyCart) {
    dataFile = extractDurationFeatures.destFile
    descriptionFile = generateDurationFeatureDescription.destFile
    predictee = 'segment_duration'
    destFile = layout.buildDirectory.dir('prosody').get().file('dur.tree')
}

task testTrainDurationCart {
    dependsOn trainDurationCart, legacyDurationCARTTrainer
    doLast {
        def actual = trainDurationCart.destFile.get().asFile.readLines()
        def expected = file("$buildDir/temp/dur.tree").readLines()
        assert actual == expected
    }
    test.dependsOn it
}

task trainF0LeftCart(type: TrainProsodyCart) {
    dataFile = extractF0Features.destFile
    descriptionFile = generateF0FeatureDescription.destFile
    predictee = 'leftF0'
    ignoreFields = ['midF0', 'rightF0']
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.left.tree')
}

task testTrainF0LeftCart {
    dependsOn trainF0LeftCart, legacyF0CARTTrainer
    doLast {
        def actual = trainF0LeftCart.destFile.get().asFile.readLines()
        def expected = file("$buildDir/temp/f0.left.tree").readLines()
        assert actual == expected
    }
    test.dependsOn it
}

task trainF0MidCart(type: TrainProsodyCart) {
    dataFile = extractF0Features.destFile
    descriptionFile = generateF0FeatureDescription.destFile
    predictee = 'midF0'
    ignoreFields = ['leftF0', 'rightF0']
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.mid.tree')
}

task testTrainF0MidCart {
    dependsOn trainF0MidCart, legacyF0CARTTrainer
    doLast {
        def actual = trainF0MidCart.destFile.get().asFile.readLines()
        def expected = file("$buildDir/temp/f0.mid.tree").readLines()
        assert actual == expected
    }
    test.dependsOn it
}

task trainF0RightCart(type: TrainProsodyCart) {
    dataFile = extractF0Features.destFile
    descriptionFile = generateF0FeatureDescription.destFile
    predictee = 'rightF0'
    ignoreFields = ['leftF0', 'midF0']
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.right.tree')
}

task testTrainF0RightCart {
    dependsOn trainF0RightCart, legacyF0CARTTrainer
    doLast {
        def actual = trainF0RightCart.destFile.get().asFile.readLines()
        def expected = file("$buildDir/temp/f0.right.tree").readLines()
        assert actual == expected
    }
    test.dependsOn it
}

task convertDurationCart(type: ConvertProsodyCart) {
    srcFile = trainDurationCart.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('dur.tree')
}

task testConvertDurationCart {
    dependsOn convertDurationCart, legacyDurationCARTTrainer
    doLast {
        def actual = convertDurationCart.destFile.get().asFile.bytes
        def expected = legacyDurationCARTTrainer.destFile.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task convertF0LeftCart(type: ConvertProsodyCart) {
    srcFile = trainF0LeftCart.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('f0.left.tree')
}

task testConvertF0LeftCart {
    dependsOn convertF0LeftCart, legacyF0CARTTrainer
    doLast {
        def actual = convertF0LeftCart.destFile.get().asFile.bytes
        def expected = legacyF0CARTTrainer.destFile.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task convertF0MidCart(type: ConvertProsodyCart) {
    srcFile = trainF0MidCart.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('f0.mid.tree')
}

task testConvertF0MidCart {
    dependsOn convertF0MidCart, legacyF0CARTTrainer
    doLast {
        def actual = convertF0MidCart.destFile.get().asFile.bytes
        def expected = legacyF0CARTTrainer.destFile2.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}

task convertF0RightCart(type: ConvertProsodyCart) {
    srcFile = trainF0RightCart.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('f0.right.tree')
}

task testConvertF0RightCart {
    dependsOn convertF0RightCart, legacyF0CARTTrainer
    doLast {
        def actual = convertF0RightCart.destFile.get().asFile.bytes
        def expected = legacyF0CARTTrainer.destFile3.get().asFile.bytes
        assert actual == expected
    }
    test.dependsOn it
}
