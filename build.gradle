import de.dfki.mary.voicebuilding.tasks.FeatureListerTask
import de.dfki.mary.voicebuilding.tasks.MaryInterfaceBatchTask

plugins {
//    id 'de.dfki.mary.voicebuilding-legacy'
    id 'de.dfki.mary.voicebuilding-festvox'
}

group 'de.dfki.mary'
version '5.3-SNAPSHOT'

ext {
    incubatingBuildDir = layout.buildDirectory.dir('mary_new')
}

marytts.voice {
    name = 'cmu-awb-time'
    language = 'en'
    region = 'US'
    gender = 'male'
    type = 'unit selection'
    description = 'A male Scottish English limited-domain unit selection voice, built from recordings provided by Carnegie Mellon University'
    samplingRate = 16000
}

repositories {
    ivy {
        url 'https://dl.bintray.com/marytts/marytts'
        layout 'pattern', {
            artifact '[organisation]/[module]/[artifact].[ext]'
        }
    }
    ivy {
        url 'http://festvox.org/examples'
        layout 'pattern', {
            artifact '[module]_[classifier]/packed/[artifact].[ext]'
        }
    }
}

dependencies {
    data group: 'org.festvox', name: 'cmu_time_awb', classifier: 'ldom', ext: 'tar.bz2'
}

text {
    srcFile = file("$sourceSets.data.output.resourcesDir/time.data")
}

basenames {
    textDir = text.destDir
    labDir = lab.destDir
}

generateAllophones {
    srcDir = text.destDir
}

generateVoiceConfig {
    afterEvaluate {
        config.get() << [
                exampleTextFile: "jar:/marytts/voice/$marytts.voice.nameCamelCase/exampleText.txt",
        ]
    }
}

task makeBasenameDatagrams(type: MakeBasenameDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    pmDir = pitchmarkConverter.destDir
    destDir = layout.buildDirectory.dir('basenameDatagrams')
}

task basenameTimelineMaker(type: TimelineMaker) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    idxIntervalInSeconds = 2.0
    srcDir = makeBasenameDatagrams.destDir
    destFile = incubatingBuildDir.get().file('timeline_basenames.mry')
}

task makeWaveDatagrams(type: MakeWaveDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    wavDir = wav.destDir
    pmDir = pitchmarkConverter.destDir
    destDir = layout.buildDirectory.dir('waveDatagrams')
}

task waveTimelineMaker(type: TimelineMaker) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    idxIntervalInSeconds = 0.1
    srcDir = makeWaveDatagrams.destDir
    destFile = incubatingBuildDir.get().file('timeline_waveforms.mry')
}

task makeMcepDatagrams(type: MakeMcepDatagrams) {
    basenamesFile = basenames.destFile
    sampleRate = marytts.voice.samplingRate
    mcepDir = mcepExtractor.destDir
    destDir = layout.buildDirectory.dir('mcepDatagrams')
}

task generateMcepTimelineHeader(type: GenerateMcepTimelineHeader) {
    srcDir = mcepExtractor.destDir
    destFile = incubatingBuildDir.get().file('timeline_mcep.properties')
}

task mcepTimelineMaker(type: McepTimelineMaker) {
    basenamesFile = basenames.destFile
    headerFile = generateMcepTimelineHeader.destFile
    sampleRate = marytts.voice.samplingRate
    idxIntervalInSeconds = 0.1
    srcDir = makeMcepDatagrams.destDir
    destFile = incubatingBuildDir.get().file('timeline_mcep.mry')
}

task processPhoneLabels(type: ProcessPhoneLabels) {
    basenamesFile = basenames.destFile
    srcDir = lab.destDir
    destDir = layout.buildDirectory.dir('lab_processed')
}

task alignLabelsWithPrompts(type: AlignLabelsWithPrompts) {
    basenamesFile = basenames.destFile
    labDir = lab.destDir
    maryXmlDir = generateAllophones.destDir
    destDir = layout.buildDirectory.dir('allophones_new')
}

task phoneUnitFileMaker(type: PhoneUnitFileMaker) {
    basenamesFile = basenames.destFile
    srcDir = processPhoneLabels.destDir
    srcExt = 'lab'
    pmDir = pitchmarkConverter.destDir
    sampleRate = marytts.voice.samplingRate
    destFile = incubatingBuildDir.get().file('phoneUnits.mry')
}

task splitPhoneLabelsIntoHalfPhones(type: SplitPhoneLabelsIntoHalfPhones) {
    basenamesFile = basenames.destFile
    srcDir = processPhoneLabels.destDir
    destDir = layout.buildDirectory.dir('halfphonelab_aligned_new')
}

task halfPhoneUnitFileMaker(type: PhoneUnitFileMaker) {
    basenamesFile = basenames.destFile
    srcDir = splitPhoneLabelsIntoHalfPhones.destDir
    srcExt = 'hplab'
    pmDir = pitchmarkConverter.destDir
    sampleRate = marytts.voice.samplingRate
    destFile = incubatingBuildDir.get().file('halfphoneUnits.mry')
}

project.task('featureLister', type: FeatureListerTask) {
    destFile = incubatingBuildDir.get().file('features.txt')
}

project.task('phoneUnitFeatureComputer', type: MaryInterfaceBatchTask) {
    dependsOn featureLister
    srcDir = alignLabelsWithPrompts.destDir
    destDir = project.layout.buildDirectory.dir('phonefeatures')
    inputType = 'ALLOPHONES'
    inputExt = 'xml'
    outputType = 'TARGETFEATURES'
    outputExt = 'pfeats'
    doFirst {
        outputTypeParams = ['phone'] + project.featureLister.destFile.get().asFile.readLines().findAll {
            it != 'phone' && !(it in ['halfphone_lr', 'halfphone_unitname'])
        }
    }
}

task generatePhoneFeatureDefinitionFile(type: GeneratePhoneFeatureDefinitionFile) {
    srcDir = phoneUnitFeatureComputer.destDir
    srcExt = phoneUnitFeatureComputer.outputExt
    destFile = incubatingBuildDir.get().file('phoneUnitFeatureDefinition.txt')
}

project.task('halfPhoneUnitFeatureComputer', type: MaryInterfaceBatchTask) {
    dependsOn featureLister
    srcDir = alignLabelsWithPrompts.destDir
    destDir = project.layout.buildDirectory.dir('halfphonefeatures')
    inputType = 'ALLOPHONES'
    inputExt = 'xml'
    outputType = 'HALFPHONE_TARGETFEATURES'
    outputExt = 'hpfeats'
    doFirst {
        outputTypeParams = ['halfphone_unitname'] + project.featureLister.destFile.get().asFile.readLines().findAll {
            it != 'halfphone_unitname'
        }
    }
}

task generateHalfPhoneFeatureDefinitionFile(type: GeneratePhoneFeatureDefinitionFile) {
    srcDir = halfPhoneUnitFeatureComputer.destDir
    srcExt = halfPhoneUnitFeatureComputer.outputExt
    destFile = incubatingBuildDir.get().file('halfphoneUnitFeatureDefinition.txt')
}

task phoneFeatureFileMaker(type: PhoneFeatureFileMaker) {
    basenamesFile = basenames.destFile
    srcDir = phoneUnitFeatureComputer.destDir
    srcExt = phoneUnitFeatureComputer.outputExt
    unitFile = phoneUnitFileMaker.destFile
    featureDefinitionFile = generatePhoneFeatureDefinitionFile.destFile
    destFile = incubatingBuildDir.get().file('phoneFeatures.mry')
}

task halfPhoneFeatureFileMaker(type: PhoneFeatureFileMaker) {
    basenamesFile = basenames.destFile
    srcDir = halfPhoneUnitFeatureComputer.destDir
    srcExt = halfPhoneUnitFeatureComputer.outputExt
    unitFile = halfPhoneUnitFileMaker.destFile
    featureDefinitionFile = generateHalfPhoneFeatureDefinitionFile.destFile
    destFile = incubatingBuildDir.get().file('halfphoneFeatures.mry')
}

task f0ContourFeatureFileMaker(type: F0ContourFeatureFileMaker) {
    featureFile = halfPhoneFeatureFileMaker.destFile
    timelineFile = waveTimelineMaker.destFile
    unitFile = halfPhoneUnitFileMaker.destFile
    gender = marytts.voice.gender
    destFile = incubatingBuildDir.get().file('syllableF0Polynomials.mry')
}

task generateAcousticFeatureDefinitionFile(type: GenerateAcousticFeatureDefinitionFile) {
    srcFile = halfPhoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('halfphoneUnitFeatureDefinition_ac.txt')
}

task acousticFeatureFileMaker(type: AcousticFeatureFileMaker) {
    featureDefinitionFile = generateAcousticFeatureDefinitionFile.destFile
    unitFile = halfPhoneUnitFileMaker.destFile
    contourFile = f0ContourFeatureFileMaker.destFile
    featureFile = halfPhoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('halfphoneFeatures_ac.mry')
}

task generateJoinCostWeights(type: GenerateJoinCostWeights) {
    destFile = incubatingBuildDir.get().file('joinCostWeights.txt')
}

task joinCostFileMaker(type: JoinCostFileMaker) {
    weightsFile = generateJoinCostWeights.destFile
    mcepFile = mcepTimelineMaker.destFile
    unitFile = halfPhoneUnitFileMaker.destFile
    featureFile = acousticFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('joinCostFeatures.mry')
}

task generateFeatureSequence(type: GenerateFeatureSequence) {
    features = ['phone']
    destFile = incubatingBuildDir.get().file('featureSequence.txt')
}

task cartBuilder(type: CartBuilder) {
    featureFile = acousticFeatureFileMaker.destFile
    featureSequenceFile = generateFeatureSequence.destFile
    destFile = incubatingBuildDir.get().file('cart.mry')
}

task generateDurationFeatureDescription(type: GenerateProsodyFeatureDescription) {
    srcFile = phoneFeatureFileMaker.destFile
    targetFeatures = ['segment_duration']
    destFile = layout.buildDirectory.dir('prosody').get().file('dur.desc')
}

task generateF0FeatureDescription(type: GenerateProsodyFeatureDescription) {
    srcFile = phoneFeatureFileMaker.destFile
    targetFeatures = ['leftF0', 'midF0', 'rightF0']
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.desc')
}

task extractDurationFeatures(type: ExtractDurationFeatures) {
    unitFile = phoneUnitFileMaker.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = layout.buildDirectory.dir('prosody').get().file('dur.feats')
}

task extractF0Features(type: ExtractF0Features) {
    unitFile = phoneUnitFileMaker.destFile
    featureFile = phoneFeatureFileMaker.destFile
    timelineFile = waveTimelineMaker.destFile
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.feats')
}

task trainDurationCart(type: TrainProsodyCart) {
    dataFile = extractDurationFeatures.destFile
    descriptionFile = generateDurationFeatureDescription.destFile
    predictee = 'segment_duration'
    destFile = layout.buildDirectory.dir('prosody').get().file('dur.tree')
}

task trainF0LeftCart(type: TrainProsodyCart) {
    dataFile = extractF0Features.destFile
    descriptionFile = generateF0FeatureDescription.destFile
    predictee = 'leftF0'
    ignoreFields = ['midF0', 'rightF0']
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.left.tree')
}

task trainF0MidCart(type: TrainProsodyCart) {
    dataFile = extractF0Features.destFile
    descriptionFile = generateF0FeatureDescription.destFile
    predictee = 'midF0'
    ignoreFields = ['leftF0', 'rightF0']
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.mid.tree')
}

task trainF0RightCart(type: TrainProsodyCart) {
    dataFile = extractF0Features.destFile
    descriptionFile = generateF0FeatureDescription.destFile
    predictee = 'rightF0'
    ignoreFields = ['leftF0', 'midF0']
    destFile = layout.buildDirectory.dir('prosody').get().file('f0.right.tree')
}

tasks.withType(TrainProsodyCart) {
    wagon = file('/usr/local/bin/wagon')
}

task convertDurationCart(type: ConvertProsodyCart) {
    srcFile = trainDurationCart.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('dur.tree')
}

task convertF0LeftCart(type: ConvertProsodyCart) {
    srcFile = trainF0LeftCart.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('f0.left.tree')
}

task convertF0MidCart(type: ConvertProsodyCart) {
    srcFile = trainF0MidCart.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('f0.mid.tree')
}

task convertF0RightCart(type: ConvertProsodyCart) {
    srcFile = trainF0RightCart.destFile
    featureFile = phoneFeatureFileMaker.destFile
    destFile = incubatingBuildDir.get().file('f0.right.tree')
}

project.generateVoiceConfig {
    config.get() << [
            'viterbi.wTargetCosts'    : 0.7,
            'viterbi.beamsize'        : 100,
            databaseClass             : 'marytts.unitselection.data.DiphoneUnitDatabase',
            selectorClass             : 'marytts.unitselection.select.DiphoneUnitSelector',
            concatenatorClass         : 'marytts.unitselection.concat.OverlapUnitConcatenator',
            targetCostClass           : 'marytts.unitselection.select.DiphoneFFRTargetCostFunction',
            joinCostClass             : 'marytts.unitselection.select.JoinCostFeatures',
            unitReaderClass           : 'marytts.unitselection.data.UnitFileReader',
            cartReaderClass           : 'marytts.cart.io.MARYCartReader',
            audioTimelineReaderClass  : 'marytts.unitselection.data.TimelineReader',
            featureFile               : "MARY_BASE/lib/voices/$project.marytts.voice.name/halfphoneFeatures_ac.mry",
            targetCostWeights         : "jar:/marytts/voice/$project.marytts.voice.nameCamelCase/halfphoneUnitFeatureDefinition_ac.txt",
            joinCostFile              : "MARY_BASE/lib/voices/$project.marytts.voice.name/joinCostFeatures.mry",
            joinCostWeights           : "jar:/marytts/voice/$project.marytts.voice.nameCamelCase/joinCostWeights.txt",
            unitsFile                 : "MARY_BASE/lib/voices/$project.marytts.voice.name/halfphoneUnits.mry",
            cartFile                  : "jar:/marytts/voice/$project.marytts.voice.nameCamelCase/cart.mry",
            audioTimelineFile         : "MARY_BASE/lib/voices/$project.marytts.voice.name/timeline_waveforms.mry",
            basenameTimeline          : "MARY_BASE/lib/voices/$project.marytts.voice.name/timeline_basenames.mry",
            acousticModels            : 'duration F0 midF0 rightF0',
            'duration.model'          : 'cart',
            'duration.data'           : "jar:/marytts/voice/$project.marytts.voice.nameCamelCase/dur.tree",
            'duration.attribute'      : 'd',
            'F0.model'                : 'cart',
            'F0.data'                 : "jar:/marytts/voice/$project.marytts.voice.nameCamelCase/f0.left.tree",
            'F0.attribute'            : 'f0',
            'F0.attribute.format'     : '(0,%.0f)',
            'F0.predictFrom'          : 'firstVowels',
            'F0.applyTo'              : 'firstVoicedSegments',
            'midF0.model'             : 'cart',
            'midF0.data'              : "jar:/marytts/voice/$project.marytts.voice.nameCamelCase/f0.mid.tree",
            'midF0.attribute'         : 'f0',
            'midF0.attribute.format'  : '(50,%.0f)',
            'midF0.predictFrom'       : 'firstVowels',
            'midF0.applyTo'           : 'firstVowels',
            'rightF0.model'           : 'cart',
            'rightF0.data'            : "jar:/marytts/voice/$project.marytts.voice.nameCamelCase/f0.right.tree",
            'rightF0.attribute'       : 'f0',
            'rightF0.attribute.format': '(100,%.0f)',
            'rightF0.predictFrom'     : 'firstVowels',
            'rightF0.applyTo'         : 'lastVoicedSegments'
    ]
}

processResources {
    from generateAcousticFeatureDefinitionFile,
            generateJoinCostWeights,
            cartBuilder,
            convertDurationCart,
            convertF0LeftCart,
            convertF0MidCart,
            convertF0RightCart
    rename { "marytts/voice/$project.marytts.voice.nameCamelCase/$it" }
}

task processLegacyResources(type: Copy) {
    from waveTimelineMaker,
            basenameTimelineMaker,
            halfPhoneUnitFileMaker,
            acousticFeatureFileMaker,
            joinCostFileMaker
    into layout.buildDirectory.dir('legacy')
    rename { "lib/voices/$project.marytts.voice.name/$it" }
}

project.task('runNew', type: JavaExec) {
    dependsOn processLegacyResources
    classpath = project.configurations.runtimeClasspath + project.sourceSets.main.output
    main = 'marytts.server.Mary'
    systemProperty 'log4j.logger.marytts', 'INFO,stderr'
    systemProperty 'mary.base', processLegacyResources.destinationDir
}

dependencies {
    integrationTestRuntimeOnly "de.dfki.mary:marytts-lang-$project.marytts.voice.language:$project.marytts.version", {
        exclude group: '*', module: 'groovy-all'
    }
}

project.integrationTest {
    dependsOn processLegacyResources
    systemProperty 'mary.base', processLegacyResources.destinationDir
}

task assembleNew {
    dependsOn joinCostFileMaker,
            cartBuilder,
            convertDurationCart,
            convertF0LeftCart,
            convertF0MidCart,
            convertF0RightCart,
            basenameTimelineMaker
}
